version: '3.8'

services:
  # MongoDB Database
  secureshare-db:
    image: mongo:6.0
    container_name: secureshare-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-securepassword123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-secureshare}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - secureshare-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API Server
  secureshare-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: secureshare-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8000
      MONGO_URL: mongodb://secureshare-user:${MONGO_USER_PASSWORD:-userpassword123}@secureshare-db:27017/secureshare?authSource=secureshare
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production-256-bits}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this-in-production-256-bits}
      FRONTEND_URL: http://localhost:3000
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "8000:8000"
    volumes:
      - server_uploads:/app/uploads
      - server_logs:/app/logs
    networks:
      - secureshare-network
    depends_on:
      secureshare-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/api/health', (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  secureshare-client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: production
    container_name: secureshare-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8000/api
    ports:
      - "3000:3000"
    networks:
      - secureshare-network
    depends_on:
      secureshare-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session storage (optional)
  secureshare-redis:
    image: redis:7-alpine
    container_name: secureshare-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - secureshare-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  secureshare-proxy:
    image: nginx:alpine
    container_name: secureshare-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - secureshare-network
    depends_on:
      - secureshare-client
      - secureshare-server
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  server_uploads:
    driver: local
  server_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  secureshare-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16 